/* Generated By:JJTree&JavaCC: Do not edit this line. PROMELAParserConstants.java */
package com.googlecode.promnetpp.parsing;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PROMELAParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int DEFINE_DIRECTIVE = 10;
  /** RegularExpression Id. */
  int LETTER = 11;
  /** RegularExpression Id. */
  int DIGIT = 12;
  /** RegularExpression Id. */
  int ATOMIC = 13;
  /** RegularExpression Id. */
  int BIT = 14;
  /** RegularExpression Id. */
  int BOOL = 15;
  /** RegularExpression Id. */
  int BREAK = 16;
  /** RegularExpression Id. */
  int BYTE = 17;
  /** RegularExpression Id. */
  int CHAN = 18;
  /** RegularExpression Id. */
  int D_STEP = 19;
  /** RegularExpression Id. */
  int DO = 20;
  /** RegularExpression Id. */
  int ELSE = 21;
  /** RegularExpression Id. */
  int FALSE = 22;
  /** RegularExpression Id. */
  int FI = 23;
  /** RegularExpression Id. */
  int FOR = 24;
  /** RegularExpression Id. */
  int IF = 25;
  /** RegularExpression Id. */
  int INIT = 26;
  /** RegularExpression Id. */
  int INLINE = 27;
  /** RegularExpression Id. */
  int INT = 28;
  /** RegularExpression Id. */
  int MTYPE = 29;
  /** RegularExpression Id. */
  int OD = 30;
  /** RegularExpression Id. */
  int OF = 31;
  /** RegularExpression Id. */
  int PROCTYPE = 32;
  /** RegularExpression Id. */
  int RUN = 33;
  /** RegularExpression Id. */
  int SHORT = 34;
  /** RegularExpression Id. */
  int SKIP_ = 35;
  /** RegularExpression Id. */
  int TIMEOUT = 36;
  /** RegularExpression Id. */
  int TRUE = 37;
  /** RegularExpression Id. */
  int TYPEDEF = 38;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 39;
  /** RegularExpression Id. */
  int STRING_LITERAL = 40;
  /** RegularExpression Id. */
  int IDENTIFIER = 41;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_DEFINE = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"/*\"",
    "<token of kind 6>",
    "\"*/\"",
    "\"#define\"",
    "<token of kind 9>",
    "\"\\n\"",
    "<LETTER>",
    "<DIGIT>",
    "\"atomic\"",
    "\"bit\"",
    "\"bool\"",
    "\"break\"",
    "\"byte\"",
    "\"chan\"",
    "\"d_step\"",
    "\"do\"",
    "\"else\"",
    "\"false\"",
    "\"fi\"",
    "\"for\"",
    "\"if\"",
    "\"init\"",
    "\"inline\"",
    "\"int\"",
    "\"mtype\"",
    "\"od\"",
    "\"of\"",
    "\"proctype\"",
    "\"run\"",
    "\"short\"",
    "\"skip\"",
    "\"timeout\"",
    "\"true\"",
    "\"typedef\"",
    "<INTEGER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "\"{\"",
    "\";\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\"=\"",
    "\"(\"",
    "\")\"",
    "\"->\"",
    "\"!\"",
    "\"?\"",
    "\"++\"",
    "\"--\"",
    "\"::\"",
    "\":\"",
    "\"..\"",
    "\".\"",
    "\"+\"",
    "\"-\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"==\"",
    "\"!=\"",
    "\"&&\"",
    "\"||\"",
    "\"*\"",
    "\"/\"",
  };

}

/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Parser.jj */
/*@egen*//*
PROMELA grammar in JJTree
Author: Miguel Martins (miguel.martins.gama@gmail.com)
*/
options {
    DEBUG_LOOKAHEAD=false;
    DEBUG_PARSER=false;
    LOOKAHEAD=3;
                         
    STATIC=false;
}

PARSER_BEGIN(PROMELAParser)

package promnetpp.parsing;

import java.io.BufferedReader;
import java.io.InputStreamReader;

public class PROMELAParser/*@bgen(jjtree)*/implements PROMELAParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTPROMELAParserState jjtree = new JJTPROMELAParserState();

/*@egen*/
    public static void main(String[] args) throws Exception {
        BufferedReader standardInputReader = new BufferedReader(
            new InputStreamReader(System.in));
        PROMELAParser parser = new PROMELAParser(standardInputReader);
        System.err.println("Waiting for your input.");
        ASTNode rootNode = parser.Start();
        rootNode.dump("");
    }
}

PARSER_END(PROMELAParser)

SKIP : {" " | "\t" | "\r" | "\n"}

/* Comments */
MORE : {
    "/*": IN_MULTI_LINE_COMMENT
}

<IN_MULTI_LINE_COMMENT> MORE : {
    < ~[] >
}

<IN_MULTI_LINE_COMMENT> TOKEN : {
    <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}
/* Comment handling ends here */

/* Define directives*/
MORE : {
    "#define": IN_DEFINE
}

<IN_DEFINE> MORE : {
    < ~["\n"] >
}

<IN_DEFINE> TOKEN : {
    < DEFINE_DIRECTIVE : "\n" > : DEFAULT
}
/* End define directives*/

TOKEN : {
    < #LETTER: ["_","a"-"z","A"-"Z"] >
    | < #DIGIT: ["0"-"9"] >
    /* Keywords */
    | < ATOMIC : "atomic" >
    | < BIT : "bit">
    | < BOOL : "bool">
    | < BREAK : "break" >
    | < BYTE : "byte">
    | < CHAN : "chan" >
    | < D_STEP : "d_step" >
    | < DO : "do">
    | < ELSE : "else" >
    | < FALSE : "false" >
    | < FI : "fi">
    | < FOR : "for">
    | < IF : "if">
    | < INIT : "init" >
    | < INLINE : "inline" >
    | < INT : "int" >
    | < MTYPE : "mtype" >
    | < OD : "od" >
    | < OF : "of" >
    | < PROCTYPE : "proctype" >
    | < RUN : "run" >
    | < SHORT : "short" >
    | < SKIP_ : "skip" >
    | < TIMEOUT : "timeout" >
    | < TRUE : "true" >
    | < TYPEDEF : "typedef" >
    /* Literals */
    | < INTEGER_LITERAL: (<DIGIT>)+ >
    | < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
    >
    /* Other */
    | < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
}

ASTNode Start() : {/*@bgen(jjtree) Start */
  ASTNode jjtn000 = new ASTNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
    try {
/*@egen*/
    Specification() <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Specification() : {/*@bgen(jjtree) Specification */
  ASTNode jjtn000 = new ASTNode(JJTSPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Specification */
    try {
/*@egen*/
    (Unit())+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Unit() : {/*@bgen(jjtree) Unit */
  ASTNode jjtn000 = new ASTNode(JJTUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Unit */
    try {
/*@egen*/
    Comment()
    | DefineDirective()
    | TypeDefinition()
    | GlobalDeclaration()
    | FunctionDefinition()
    | ProcessDefinition()
    | InitProcessDefinition()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Comment() : {/*@bgen(jjtree) Comment */
                  ASTNode jjtn000 = new ASTNode(JJTCOMMENT);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token comment;}
{/*@bgen(jjtree) Comment */
    try {
/*@egen*/
    comment = <MULTI_LINE_COMMENT>/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                   }
/*@egen*/ { jjtn000.value = comment.image; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DefineDirective() : {/*@bgen(jjtree) DefineDirective */
                          ASTNode jjtn000 = new ASTNode(JJTDEFINEDIRECTIVE);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token directive;}
{/*@bgen(jjtree) DefineDirective */
    try {
/*@egen*/
    directive = <DEFINE_DIRECTIVE>/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                   }
/*@egen*/ { jjtn000.value = directive.image; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TypeDefinition() : {/*@bgen(jjtree) TypeDefinition */
                         ASTNode jjtn000 = new ASTNode(JJTTYPEDEFINITION);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token identifier;}
{/*@bgen(jjtree) TypeDefinition */
    try {
/*@egen*/
    <TYPEDEF> identifier = <IDENTIFIER> { jjtn000.name = identifier.image; }
    "{" SimpleDeclaration() (";" SimpleDeclaration())* [";"] "}" [";"]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SimpleDeclaration() : {/*@bgen(jjtree) SimpleDeclaration */
                            ASTNode jjtn000 = new ASTNode(JJTSIMPLEDECLARATION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/String typeName; Token identifier;
Token arrayCapacity;}
{/*@bgen(jjtree) SimpleDeclaration */
    try {
/*@egen*/
    typeName = TypeName() identifier = <IDENTIFIER> 
    { jjtn000.typeName = typeName; jjtn000.name = identifier.image; }
    /* Is this an array declaration? */
    [ "["
    (arrayCapacity = <IDENTIFIER> | arrayCapacity = <INTEGER_LITERAL>)
    "]" { jjtn000.putValue("isArray", true); jjtn000.putValue("arrayCapacity",
    arrayCapacity.image); }
    ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MultiDeclaration() : {/*@bgen(jjtree) MultiDeclaration */
  ASTNode jjtn000 = new ASTNode(JJTMULTIDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MultiDeclaration */
    try {
/*@egen*/
    TypeName() <IDENTIFIER> ("," <IDENTIFIER>)+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String TypeName() : {/*@bgen(jjtree) TypeName */
                     ASTNode jjtn000 = new ASTNode(JJTTYPENAME);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token identifier;}
{/*@bgen(jjtree) TypeName */
    try {
/*@egen*/
    <BIT>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ { return "bit"; }
    | <BOOL>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ { return "bool"; }
    | <BYTE>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ { return "byte"; }
    | <CHAN>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ { return "chan"; }
    | <INT>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ { return "int"; }
    | <MTYPE>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ { return "mtype"; }
    | <SHORT>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ { return "short"; }
    | identifier = <IDENTIFIER>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ { return identifier.image; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void GlobalDeclaration() : {/*@bgen(jjtree) GlobalDeclaration */
  ASTNode jjtn000 = new ASTNode(JJTGLOBALDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GlobalDeclaration */
    try {
/*@egen*/
    SimpleDeclaration() [ "=" (Expression() | ChannelInitialization()) ] ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ChannelInitialization() : {/*@bgen(jjtree) ChannelInitialization */
  ASTNode jjtn000 = new ASTNode(JJTCHANNELINITIALIZATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ChannelInitialization */
    try {
/*@egen*/
    "[" (<IDENTIFIER> | <INTEGER_LITERAL>) "]" <OF>
    "{" TypeName() ("," TypeName())* "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FunctionDefinition() : {/*@bgen(jjtree) FunctionDefinition */
  ASTNode jjtn000 = new ASTNode(JJTFUNCTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionDefinition */
    try {
/*@egen*/
    <INLINE> <IDENTIFIER> "(" [FunctionParameters()] ")"
    "{" InstructionList() "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FunctionParameters() : {/*@bgen(jjtree) FunctionParameters */
  ASTNode jjtn000 = new ASTNode(JJTFUNCTIONPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionParameters */
    try {
/*@egen*/
    <IDENTIFIER> ("," <IDENTIFIER>)*/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void InstructionList() : {/*@bgen(jjtree) InstructionList */
  ASTNode jjtn000 = new ASTNode(JJTINSTRUCTIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InstructionList */
    try {
/*@egen*/
    (Instruction())+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Instruction() : {/*@bgen(jjtree) Instruction */
  ASTNode jjtn000 = new ASTNode(JJTINSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Instruction */
    try {
/*@egen*/
    NonBlockInstruction() [("->" | ";")]
    | BlockInstruction()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NonBlockInstruction() : {/*@bgen(jjtree) NonBlockInstruction */
  ASTNode jjtn000 = new ASTNode(JJTNONBLOCKINSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NonBlockInstruction */
    try {
/*@egen*/
    /* variable++ and variable-- */
    LOOKAHEAD(Increment()) Increment()
    | LOOKAHEAD(Decrement()) Decrement()
    /* variable = some expression */
    | LOOKAHEAD(Assignment()) Assignment()
    /* channel ! arguments and channel ? arguments */
    | LOOKAHEAD(SendStatement()) SendStatement()
    | LOOKAHEAD(ReceiveStatement()) ReceiveStatement()
    /* declarations */
    | LOOKAHEAD(MultiDeclaration()) MultiDeclaration()
    | LOOKAHEAD(SimpleDeclaration()) SimpleDeclaration()
    /* simple expressions */
    | LOOKAHEAD(Expression()) Expression()
    /* other */
    | Break()
    | DoLoop()
    | Else()
    | ForLoop()
    | If()
    | Run()
    | Skip()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SendStatement() : {/*@bgen(jjtree) SendStatement */
  ASTNode jjtn000 = new ASTNode(JJTSENDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SendStatement */
    try {
/*@egen*/
    Variable() "!" Expression() ("," Expression())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ReceiveStatement() : {/*@bgen(jjtree) ReceiveStatement */
  ASTNode jjtn000 = new ASTNode(JJTRECEIVESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReceiveStatement */
    try {
/*@egen*/
    Variable() "?" Variable() ("," Variable())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Increment() : {/*@bgen(jjtree) Increment */
  ASTNode jjtn000 = new ASTNode(JJTINCREMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Increment */
    try {
/*@egen*/
    Variable() "++"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Decrement() : {/*@bgen(jjtree) Decrement */
  ASTNode jjtn000 = new ASTNode(JJTDECREMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Decrement */
    try {
/*@egen*/
    Variable() "--"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Assignment() : {/*@bgen(jjtree) Assignment */
  ASTNode jjtn000 = new ASTNode(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assignment */
    try {
/*@egen*/
    Variable() "=" Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Break() : {/*@bgen(jjtree) Break */
  ASTNode jjtn000 = new ASTNode(JJTBREAK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Break */
    try {
/*@egen*/
    <BREAK>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DoLoop() : {/*@bgen(jjtree) DoLoop */
  ASTNode jjtn000 = new ASTNode(JJTDOLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DoLoop */
    try {
/*@egen*/
    <DO> ("::" InstructionList())+ <OD>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ForLoop() : {/*@bgen(jjtree) ForLoop */
  ASTNode jjtn000 = new ASTNode(JJTFORLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForLoop */
    try {
/*@egen*/
    <FOR> "(" Variable() ":" Expression() ".." Expression() ")"
    "{" InstructionList() "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void If() : {/*@bgen(jjtree) If */
  ASTNode jjtn000 = new ASTNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) If */
    try {
/*@egen*/
    <IF> ("::" InstructionList())+ <FI>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Else() : {/*@bgen(jjtree) Else */
  ASTNode jjtn000 = new ASTNode(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Else */
    try {
/*@egen*/
    <ELSE>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Run() : {/*@bgen(jjtree) Run */
  ASTNode jjtn000 = new ASTNode(JJTRUN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Run */
    try {
/*@egen*/
    <RUN> <IDENTIFIER> "(" [Expression() ("," Expression())*] ")"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Skip() : {/*@bgen(jjtree) Skip */
  ASTNode jjtn000 = new ASTNode(JJTSKIP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Skip */
    try {
/*@egen*/
    <SKIP_>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Variable() : {/*@bgen(jjtree) Variable */
  ASTNode jjtn000 = new ASTNode(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Variable */
    try {
/*@egen*/
    <IDENTIFIER> [ "[" Expression() "]" ] [ "." Variable() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expression() : {/*@bgen(jjtree) Expression */
  ASTNode jjtn000 = new ASTNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
    try {
/*@egen*/
    Term() (
        "+" Term()
        | "-" Term()
        /* Comparative */
        | ">" Term()
        | ">=" Term()
        | "<" Term()
        | "<=" Term()
        | "==" Term()
        | "!=" Term()
        /* Logical */
        | "&&" Term()
        | "||" Term()
    )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Term() : {/*@bgen(jjtree) Term */
  ASTNode jjtn000 = new ASTNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Term */
    try {
/*@egen*/
    Factor() ("*" Factor() | "/" Factor())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Factor() : {/*@bgen(jjtree) Factor */
  ASTNode jjtn000 = new ASTNode(JJTFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Factor */
    try {
/*@egen*/
    "(" Expression() ")"
    | <INTEGER_LITERAL> | <STRING_LITERAL>
    | <TRUE> | <FALSE>
    | <TIMEOUT>
    
    | LOOKAHEAD(<IDENTIFIER> "(") FunctionCall()
    | Variable()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FunctionCall() : {/*@bgen(jjtree) FunctionCall */
  ASTNode jjtn000 = new ASTNode(JJTFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionCall */
    try {
/*@egen*/
    <IDENTIFIER> 
    /* Handle the select function as a special case */
    (LOOKAHEAD({token.image.equals("select")}) "(" Variable() ":" Expression()
    ".." Expression() ")"
    /* Every other function should be the same */
    | "(" [FunctionCallParameters()] ")")/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FunctionCallParameters() : {/*@bgen(jjtree) FunctionCallParameters */
  ASTNode jjtn000 = new ASTNode(JJTFUNCTIONCALLPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionCallParameters */
    try {
/*@egen*/
    Expression() ("," Expression())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void BlockInstruction() : {/*@bgen(jjtree) BlockInstruction */
  ASTNode jjtn000 = new ASTNode(JJTBLOCKINSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BlockInstruction */
    try {
/*@egen*/
    AtomicBlock()
    | DStepBlock()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AtomicBlock() : {/*@bgen(jjtree) AtomicBlock */
  ASTNode jjtn000 = new ASTNode(JJTATOMICBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AtomicBlock */
    try {
/*@egen*/
    <ATOMIC> "{" InstructionList() "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DStepBlock() : {/*@bgen(jjtree) DStepBlock */
  ASTNode jjtn000 = new ASTNode(JJTDSTEPBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DStepBlock */
    try {
/*@egen*/
    <D_STEP> "{" InstructionList() "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ProcessDefinition() : {/*@bgen(jjtree) ProcessDefinition */
  ASTNode jjtn000 = new ASTNode(JJTPROCESSDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ProcessDefinition */
    try {
/*@egen*/
    <PROCTYPE> <IDENTIFIER> "(" /* ProcessParameters() */ ")"
    "{" InstructionList() "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void InitProcessDefinition() : {/*@bgen(jjtree) InitProcessDefinition */
  ASTNode jjtn000 = new ASTNode(JJTINITPROCESSDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InitProcessDefinition */
    try {
/*@egen*/
    <INIT> "{" InstructionList() "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
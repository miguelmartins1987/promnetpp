#summary Basic usage of PROMNeT++ via the command line
#labels Phase-Deploy,Featured

= Introduction =

Like many Java applications, PROMNeT++ is distributed, in binary form, as a JAR file. This Wiki page shall serve as a guide to perform a PROMELA to C++ translation via the command line, under a Windows environment. For most modern operating systems (such as recent Linux distributions or OS X), the procedure detailed below should (hopefully) be almost the same, with minor variants.

= Prerequisites for this Workflow =

  * OMNeT++ must be installed.
    * For this guide, OMNeT++ is installed under _C:\omnetpp-4.3_
  * OMNeT++ must be fully functional, meaning it must be possible to launch its IDE via the standard _omnetpp_ command. Furthermore, it must be possible to run simulations, preferrably using OMNeT++'s graphical simulation environment (Tkenv).
    * We will resort to both OMNeT++'s IDE and graphical simulation environment later on.
    * Most samples that come with OMNeT++'s distribution should suffice when determining whether or not is possible to perform a graphical simulation.
  * PROMNeT++ (its JAR file and any other files that come with its standard distribution) must have been extracted to a directory of your choice; this guide will assume _C:\promnetpp_ as said directory. The screenshot below illustrates the contents of PROMNeT++'s standard distribution.<br><br>https://promnetpp.googlecode.com/svn/media/Distribution1.png

= Steps =
== Phase 1 - Performing the translation ==

  # Navigate to your OMNeT++ workspace directory. By default, assuming OMNeT++ is installed under _C:\omnetpp-4.3_, said workspace directory is located under under _C:\omnetpp-4.3\samples_
  # Create a new folder for your (soon to be) OMNeT++ project, in this case, _!OneThirdRule_ <br><br>https://promnetpp.googlecode.com/svn/media/CreateFolderOneThirdRule.png
  # Navigate to the folder you just created and copy the PROMELA model (typically, a file with a _.pml_ extension) that is to be submitted for translation to it. For this guide, said model is _!NewOneThirdRule.pml_<br><br>https://promnetpp.googlecode.com/svn/media/CopyPMLFile.png
  # Open a command prompt/shell/terminal at your current location. In Windows Vista and above, this can be easily done by holding down either of the _Shift_ keys and choosing the _Open command window here_ option.
  # Type in (or copy and paste) the following commands:
    * For Windows users:
{{{
set PROMNETPP_HOME=C:\promnetpp
java -enableassertions -jar "%PROMNETPP_HOME%\promnetpp.jar" NewOneThirdRule.pml
}}}
    * For Linux/OS X users:
{{{
export PROMNETPP_HOME=/Users/yourusername/promnetpp
java -enableassertions -jar $PROMNETPP_HOME/promnetpp.jar NewOneThirdRule.pml
}}}
  # Make sure the translation process was successful, meaning that:
    * No errors were reported.
    * Multiple header (_.h_) and source (_.cc_) files have been generated.
    * In case of failure, consult PROMNeT++'s log file (_promnetpp-log.xml_) to trace the source of the problem. If at all possible, correct the problem and try again.

== Phase 2 - Creating the project ==

  # Launch the OMNeT++ IDE, via the standard _omnetpp_ command.
  # Select File|New|OMNeT++ Project...
  # Under the _Project name_ field, type the name of your project, as per the name of the folder you created in step 2 of the previous phase (in this guide's case, _!OneThirdRule_)<br><br>https://promnetpp.googlecode.com/svn/media/NewOmnetppProjectOneThirdRule.png
  # Proceed to the next page of the New OMNeT++ Project wizard, and choose _Empty project_ as your template.<br><br>https://promnetpp.googlecode.com/svn/media/CreateEmptyProject.png
  # Finish the project's creation by clicking on the _Finish_ button.
    * Alternatively, should you have any need to alter the toolchains and/or configurations for your project proceed to the next pages of the wizard and make any changes you desire. I suspect most users do not need to do this, however.

== Phase 3 - Compiling and running ==

  # At this point, you will most likely notice that your newly-created project contains an error. This is to be expected, as the OMNeT++ IDE, by default, creates a _package.ned_ file which contains a package declaration. PROMNeT++ makes no use of packages; as such, all you have to do is delete the _package.ned_ file. You may do this by either highlighting the file and pressing _Delete_ on your keyboard, or by right-clicking on the file and choosing _Delete_, as shown below.<br><br>https://promnetpp.googlecode.com/svn/media/DeletePackageNED.png
  # Compile your project by right-clicking on it and choosing _Build Project_.<br><br>https://promnetpp.googlecode.com/svn/media/BuildProject.png
  # Finally, run a graphical simulation by right-clicking on your project and selecting Run As|OMNeT++ Simulation<br><br>The simulation environment shall resemble the screenshot below:<br>https://promnetpp.googlecode.com/svn/media/OneThirdRuleSimulationEnvironment.png

== Final remarks ==

  # If your simulation environment does not resemble the screenshot above, and all nodes have a question mark (?) as an icon, then you most likely need to download and extract the PROMNeT++ icon pack. Head over to the <a href="https://code.google.com/p/promnetpp/downloads/list">_Downloads_</a> page to obtain it. Make sure you follow the instructions contained in the _README.txt_ file that comes with the icon pack.
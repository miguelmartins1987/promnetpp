#summary Using PROMNeT++ Plug-in
#labels Featured

= Contents =
<wiki:toc max_depth="1" />

= Introduction =

This article constitutes a guide that is meant to provide instructions on using the PROMNeT++ Plug-in for Eclipse.

= Prerequisites =

  * It is assumed that the plug-in has been correctly installed. If not, consult [InstallingPROMNeTppPlugin this article] for installation instructions.

= Phase 1 - Creating your project =

  # If not open already, launch the OMNeT++ IDE, via the standard _omnetpp_ command.
  # Select File|New|OMNeT++ Project...
  # Give your project a name. We'll be performing a translation of the _!OneThirdRule_ protocol during this guide.<br><br>https://promnetpp.googlecode.com/svn/media/NewOmnetppProjectOneThirdRule.png
  # Proceed to the next page of the New OMNeT++ Project wizard, and choose _Empty project_ as your template.<br><br>https://promnetpp.googlecode.com/svn/media/CreateEmptyProject.png
  # Finish the project's creation by clicking on the _Finish_ button.
    * Alternatively, should you have any need to alter the toolchains and/or configurations for your project proceed to the next pages of the wizard and make any changes you desire. I suspect most users do not need to do this, however.

= Phase 2 - Perform the PROMELA to C++ translation via the plug-in =

  # First and foremost, delete the _package.ned_ file generated by OMNeT++, as it will not only not be necessary, but will also conflict with the _network.ned_ file generated by PROMNeT++ if present.
  # Add your PROMELA model (usually, a file with a _.pml_ extension) to the project's root directory. There's a number of ways to do this, for instance, by dragging and dropping the file onto the project's folder under the Project Explorer.<br><br>https://promnetpp.googlecode.com/svn/media/AddPMLFileToProjectExplorer.png
  # When right-clicking on a file with a _.pml_ extension, a new sub-menu labelled _PROMNeT++_ will appear. Simply select this sub-menu, followed by the _Translate to C++ code_ option.<br><br>https://promnetpp.googlecode.com/svn/media/PromnetppPluginOption.png
  # You will be presented with the following one-page wizard:<br><br>https://promnetpp.googlecode.com/svn/media/PromnetppPluginWizard.png
    * *promnetpp.jar location:* must point to the location of PROMNeT++'s JAR file
    * *PROMNETPP_HOME*
      * *Same as the location of the JAR file:* makes it so that, for example, if promnetpp.jar is located at /some/directory/promnetpp/promnetpp.jar, PROMNETPP_HOME is set to /some/directory/promnetpp. _It is recommended that users go with this option unless it is strictly necessary to set the PROMNETPP_HOME environment variable manually (in which case, see the option below)._
      * *Other (please specify):* manually sets the value of the PROMNETPP_HOME variable. It is particularly useful for situations where the JAR file is in a completely different location from the remaining distribution files (such as during development with !NetBeans).
    * *Configuration file*
      * *Use default configuration file:* makes it so that PROMNeT++ uses the default-configuration.xml file under `<`PROMNETPP_HOME`>`/default-configuration.xml
      * *Specify manually:* allows the user to use their own, custom configuration file. _Do note, however, that if you choose this option, it is required that you create/copy said custom configuration file to the same project as your PROMELA model._
  # Once you have adjusted the wizard's settings to your liking, click on the _Finish_ button. You will be presented with a window similar to the one below.<br><br>https://promnetpp.googlecode.com/svn/media/PromnetppPluginMessageWindow.png
  # The window above refreshes itself continuously to notify you (the user) of any progress that's been made. Once PROMNeT++ is finished (whether it succeeded or failed), the _Close_ button at the bottom may be clicked to close the window.